[
  {
    "courseId": 1,
    "courseTag": "html_for_beginners",
    "title": "HTML FOR BEGINNERS",
    "description": "",
    "requirements": "A browser like the one you are using currently to view this :) . \n A code editor , VS Code is prefered. \n Install Live server and Prettifier extensions.",
    "sectionBlocks": [
      {
        "heading": "REQUIREMENTS",
        "bulletPoints": [
          {
            "header": "",
            "content": "A browser like the one you are using currently to view this :) . \n A code editor , VS Code is prefered. \n Install Live server and Prettifier extensions."
          }
        ]
      },
      {
        "position": 1,
        "type": "normal",
        "heading": "Front-End and Back-End",
        "description": null,
        "imagePath": null,
        "bulletPoints": [
          {
            "header": "",
            "content": "The front end deals with the \"front\" of a website or application, meaning its design and coding that keep the website working properly.\nThe back end, however, refers to everything on the server-side of a website or application, such as important data.\n A full stack developer is a programmer who works within software development and is knowledgeable in both the front-end and back-end of an application."
          }
        ],
        "subHeading": [
          {
            "header": "Front-End",
            "content": "HTML :  Its the structure of the website. Used to define the layout of the webpage.\n CSS : To animate and style the layouts and contents like the font, shape of a picture and so on.\n JavaScript(JS) : To add fucntionaility to the website, to make components respond in a website , like increasing the no.of likes on click of a button and displaying the information based on user logged in. Unlike CSS and HTML this is a programming language."
          }
        ],
        "moreData": null,
        "mini-codeblock": null
      },
      {
        "position": 2,
        "type": "with image",
        "heading": "Path For Learning",
        "description": null,
        "imagePath": [
          "images/course-images/html_for_beginners/learning-path.png"
        ],
        "bulletPoints": [
          {
            "header": null,
            "content": "Learn HTML and CSS \nJavaScript\nFrameworks : Frameworks and libraries have reusable codes to make the development faster and easier For example : reactJS, Angular, Vue\nVersion Control System: These are used to keep track of project history while working on it as a team with many contributors or just you\nGit is the most popular and the best version control system"
          }
        ],
        "moreData": null,
        "mini-codeblock": null
      },
      {
        "position": 3,
        "type": "with image and code",
        "heading": "How the Web Works",
        "description": "The web address entered in a browser is URL (Uniform resource locator). Such as https://www.youtube.com/watch?v=dQw4w9WgXcQ .",
        "imagePath": [
          "images/course-images/html_for_beginners/client-server.png"
        ],
        "bulletPoints": [
          {
            "header": "As the name suggests it locates the resource, the resource could be any of the folowing",
            "content": "Image\nVideo\nWebpage\nFonts"
          }
        ],
        "subHeading": [
          {
            "header": "",
            "content": "The Client requests the server and the server provides the resource the requests message is based on a protocol(HTTP or HTTPS)\nHTTPS is HTTP with encryption and hence is more secure. It encrypts the messages exchanged between the client and server."
          }
        ],
        "moreData": [
          "When a url is entered in the browser it requests the resource from the computer the url targets to.",
          "The browser is the client and the target computer is the server."
        ],
        "miniCodeblock": [
          {
            "header": "HTTP REQUEST MESSAGE",
            "code": "GET /index.html HTTP/1.1\nHost: www.sampleweb.com\nAccept-language: en-us",
            "description": "Client is requesting to GET a page INDEX.HTML of the host www.sampleweb.com using HTTP version 1.1 using the client language english-US"
          },
          {
            "header": "HTTP REQUEST MESSAGE",
            "code": "HTTP/1.1 200 OK \nDATE: 1 JAN 2021 09:00\nContent-Type: text/html\n<!DOCTYPE html>\n<html>\n.....\n</html>",
            "description": "Version of http used : 1.1 , status code (200 OK) which means successful\nDate and time of response : 1 Jan 2021 09:00\ntype of content server is sending to client : text/htmlThe requested resource , in this case its a html file.\nThis html file may contains links or urls to othr resources such as web elements or images , once these resources are requested and recieved the browser renders the webpage."
          }
        ]
      },
      {
        "position": 4,
        "type": "with code",
        "heading": "HTML BASICS",
        "description": null,
        "imagePath": null,
        "bulletPoints": [
          {
            "header": "Follow these steps to make a new webpage :",
            "content": "Create a new folder and open the folder on the code editor.\nMake a file with the extension of .html.\nMake a file with the extension of .css\nUse the live server extension which appears on the bottom right, or right click and choose go live"
          }
        ],
        "subHeading": [
          {
            "header": "",
            "content": "The body of the HTML file begins with <!DOCTYPE html>.\n"
          },
          {
            "header": "HTML has a head and a body.",
            "content": "Head gives browser the info of the page\nTitle,styling files etc.\nBody contains the layout and all the contents of the website thats visible to the client or user.  "
          },
          {
            "header": "Additional Information",
            "content": "Most of the HTML tags have an opening and closing tag.\n<tag_name>content</tag_name>\nSelf closing tags can be used instead of such as some frameworks dont support tags without a closing tag.\nExample of self closing tags : </br>, </img>"
          }
        ],
        "moreData": ["", ""],
        "miniCodeblock": null,
        "codeBlock": null,
        "iframe": [
          {
            "header": "",
            "height": "300px",
            "width": "80%",
            "src": "https://codepen.io/richinrix/embed/qBRywOj?height=265&theme-id=dark&default-tab=html,result",
            "titleCode": "qBRywOj"
          }
        ]
      },
      {
        "position": 5,
        "type": "with code",
        "heading": "HEAD TAG",
        "description": null,
        "imagePath": null,
        "bulletPoints": [
          {
            "header": "",
            "content": "charset : Used to define the character set used , UTF-8 Represents most of the popluar formats\nviewport : The visible area of the webpage\nkeywords : For better targeting of the webpage on searching on browsers\ndescription : Description of the webpage is shown in the search result page of a browser"
          }
        ],
        "subHeading": null,
        "moreData": null,
        "miniCodeblock": null,
        "codeBlock": [
          {
            "header": "Head Tag ",
            "width": "60%",
            "code": "<head>\n<meta charset='UTF-8'>\n<meta http-equiv='X-UA-Compatible' content='IE=edge'>\n<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n <meta name='keywords' content='Learning HTML,CSS'>\n<meta name='description' content='this appears on the search engine results as description'>\n<title>Document</title>\n</head>",
            "description": null
          }
        ]
      },
      {
        "position": 6,
        "type": "with code",
        "heading": "HTML TEXT ELEMENTS",
        "description": null,
        "imagePath": null,
        "bulletPoints": [],
        "subHeading": [
          {
            "header": "Entities",
            "content": "To use symbols that have a default value in HTML as a text we use entities.\nExample : <HTML> cant be directly written inside a paragraph or header tag or anyother tag as the brackets < , >are read as tags.\n\nTo use these brackets and other sympobls we use entities in place of em.\n->   &lt; is '<' (lesser than )\n->   &gt; is '>' (greater than )\n->   So to write <HTML> , you will have to write &lt;HTML&gt;"
          }
        ],
        "moreData": null,
        "miniCodeblock": [
          {
            "header": "Other Text Elements",
            "code": "<p>\n<strong>\nBatman doesn't kill\n</strong>\n</p>",
            "description": "<p> is a paragraph element.\n<strong> is used for showing the importance of the text. By default the styling is set to bold.\n<em> is emphasizing. By default the styling is set to italics.\n<b> and <i> is bold and italics but is adivised not to use as HTML should be used for making the structure and laying out the template and not styling.\nCSS styling can be used to change the default styling of the elements"
          },
          {
            "header": "Hyperlinks",
            "code": "<a href='./about.html'cabout></a>\n\n<a href='https://google.com target='_blank' >Google</a>'\n\n<a href='./images/img1' download>download-img<a>",
            "description": "By defualt the text wrapped in an anchor tag <a></a> is set to blue color and is underlined. The mouse pointer changes whne you hover over it.\nYou can wrap an image tag with an anchor element to link the image to an hyperlink\nYou can use 'id' in the place of hyperlink to make the page move to the portion of HTML with the id='that_element' on click of the anchor elemnt too. Use : href='#id_name'\nOn using href='#' , on click the webpage goes to begining of the webpage\ntarget='_blank' attribute can be added to make the hyperlink open a new tab\nhref+'mailto:your_mailid@mail.com' can be used to open the mail client with the send address as the given address."
          }
        ],
        "codeBlock": null,
        "miniIframe": [
          {
            "header": "Heading Tags",
            "description": "There are 6 heading values and the size decreases from H1 to H6.\nHeading elements should be used based on hierarchial importance and not based on size.",
            "height": "300px",
            "width": "60%",
            "codeTitle": "eYgRwNb",
            "src": "https://codepen.io/richinrix/embed/eYgRwNb?height=265&theme-id=dark&default-tab=html,result"
          }
        ]
      }
    ]
  },
  {
    "courseId": 2,
    "courseTag": "css_in_20_minutes",
    "title": "CSS IN 20 MINUTES",
    "description": "CSS is a styling language and not a programming language. It is mainly creativity focused.",
    "requirements": "A browser like the one you are using currently to view this :) . \n A code editor , VS Code is prefered. \n Install Live server and Prettifier extensions.",
    "sectionBlocks": [
      {
        "heading": "REQUIREMENTS",
        "bulletPoints": [
          {
            "header": "",
            "content": "A browser like the one you are using currently to view this :) . \n A code editor , VS Code is prefered. \n Install Live server and Prettifier extensions."
          }
        ]
      },
      {
        "position": 1,
        "type": "normal",
        "heading": "Selector",
        "description": null,
        "imagePath": null,
        "bulletPoints": [
          {
            "header": "",
            "content": "Element selector (using HTML elements)\nClass selectors (giving a class name to HTML elements and one element can have multiple classes)\n.class_name{   'stylings is done here'  }\nId selector ( elements can have only 1 id) \tsyntax : #id_name{\t}"
          }
        ],
        "subHeading": [
          {
            "header": "Selector combinations",
            "content": "To apply a property to all the elements use star (*).\t *{ prop }\nTo select a tag within a parent tag you write the child tag after a space.\n\t\tparent_tag child_tag{ statements }\nSame can be done using ID and CLASS names\nTo share the same properties for multiple elements we write the selectors side by side seperated by commas \t element1,element2 { property }\n"
          }
        ],
        "moreData": null,
        "miniCodeblock": [
          {
            "header": "Syntax",
            "code": "selector {\nproperty1: value;\nproperty2: value;\n}",
            "description": null
          }
        ]
      },
      {
        "position": 2,
        "type": "with image",
        "heading": "Loading a css style",
        "description": null,
        "imagePath": null,
        "bulletPoints": [
          {
            "header": "Style Element",
            "content": "Its better than inline but still not ideal.\nIts by using the style tag within the head element."
          },
          {
            "header": "Inline Styling",
            "content": "This is a bad practice as HTML is meant for content only and not styling."
          },
          {
            "header": "External CSS File ",
            "content": "External file CSS file is made with the extension .css and is linked to the HTML file to load the stylings from the file.\nIts written in the head element\n<head>\n<link rel=“stylesheet” href=“style.css”/>\n</head>\nAfter linking the css file to html document through this the css styling is written in the css file. "
          }
        ],
        "subHeading": null,
        "moreData": null,
        "miniCodeblock": [
          {
            "header": "Syntax",
            "code": "<head>\n<style>\n.blue{\ncolor:blue;\n}\n</style>\n</head>",
            "description": "This is not reusable and is accessible only in the HTML file"
          },
          {
            "header": "Inline CSS",
            "code": "<h1 style=“color:blue”>\nBlue TItle \n</h1>",
            "description": "This is a bad practice as HTML is meant for content only and not styling."
          },
          {
            "header": "External CSS File",
            "code": "<head>\n<link rel=“stylesheet” href=“style.css”/>\n</head>",
            "description": "It also has a relation attribute , in case of css the relation attribute is a stylesheet.\nThe href attribute points to the css file location."
          }
        ]
      },
      {
        "position": 3,
        "type": "with code",
        "heading": "CSS Usage",
        "description": "If multiple styling is given for the same property of an element , then the latest or the bottom most one is preferred over the rest.",
        "imagePath": null,
        "bulletPoints": [
          {
            "header": "Basic Rules",
            "content": "Inline stylings overrides all stylings\n By default elements inherit the parent elements stylings\bSome elements have their on default stylings like h tags have margins and a tags have blue color and underlines."
          }
        ],
        "subHeading": [
          {
            "header": "Preference of selectors",
            "content": "Id selector is preferred over the remaining selectors\nClass selector is preferred over html element selectors\n #ID > .Class > Element_name "
          }
        ],
        "moreData": null,
        "miniCodeblock": [
          {
            "header": "Using hexadecimal values :",
            "code": "h1 { \ncolor: #5B6839\n}",
            "description": "#000000 to #ffffff,each 2 pair decides a color(3 total pairs) from RGB (Red Green Blue) spectrum."
          },
          {
            "header": "Using RGB",
            "code": "h1 { \ncolor : rgb(255,103,120)\n}",
            "description": "In this you directly mention the RGB values , you can enter a fourth value to represent opacity."
          }
        ]
      },
      {
        "position": 4,
        "type": "with code",
        "heading": "Margin And Padding",
        "description": null,
        "imagePath": null,
        "bulletPoints": [
          {
            "header": "Follow these steps to make a new webpage :",
            "content": "Create a new folder and open the folder on the code editor.\nMake a file with the extension of .html.\nMake a file with the extension of .css\nUse the live server extension which appears on the bottom right, or right click and choose go live"
          }
        ],
        "subHeading": [
          {
            "header": "Padding",
            "content": "It is the space between the content and the border of the element.\n Used to add space from the content to the border."
          },
          {
            "header": "Margin",
            "content": "It is the spacing outside the border of the element.\nIt is used to space between elements.\nBody contains the layout and all the contents of the website thats visible to the client or user.  "
          }
        ],
        "moreData": null,
        "miniCodeblock": [
          {
            "header": "Syntax",
            "code": "padding : 10px;\npadding : 10px 20px;\npadding : 10px 10px 10px 10px;",
            "description": "The same space on all four sides from the content.\nTop and bottom spacing for the first value,Left and right spacing for the 2nd value.\nTop ,Bottom ,Left and Right Values respectively."
          }
        ],
        "codeBlock": null,
        "iframe": [
          {
            "header": "",
            "height": "300px",
            "width": "80%",
            "src": "https://codepen.io/richinrix/embed/PoWdvOw?height=265&theme-id=dark&default-tab=css,result",
            "titleCode": "PoWdvOw"
          }
        ]
      }
    ]
  },
  {
    "courseId": 3,
    "courseTag": "css_display_units_position",
    "title": "CSS -Display , Units and Position",
    "description": "",
    "requirements": "A browser like the one you are using currently to view this :) . \n A code editor , VS Code is prefered. \n Install Live server and Prettifier extensions.",
    "sectionBlocks": [
      {
        "heading": "REQUIREMENTS",
        "bulletPoints": [
          {
            "header": "",
            "content": "A browser like the one you are using currently to view this :) . \n A code editor , VS Code is prefered. \n Install Live server and Prettifier extensions."
          }
        ]
      },
      {
        "position": 1,
        "type": "normal",
        "heading": "Display Properties",
        "description": null,
        "imagePath": null,
        "bulletPoints": [
          {
            "header": "There are 4 main Display types in HTML and CSS",
            "content": "Block\n Inline\n Inline-block\n None \n"
          }
        ],
        "subHeading": [
          {
            "header": "Block Display",
            "content": "The block display type takes up the entire width of the page.\n It forces a new line above and below it.\n The height and width of block elements can be defined but the width will be set to 100% by default.\n Divs are blocks by default.\n"
          },
          {
            "header": "Inline Display",
            "content": "The elements that are defined by inline type are scalable and only takes up space that is required by it’s contents.\n You can have multiple inline elements in the same line.\n They cannot be resized as they only take up essential space.\n Spans are inline by default.\n"
          },

          {
            "header": "Inline-block Display",
            "content": "Here, the elements are shown to take up only the space required by the contents but in reality take up the entire line by default.\n A good Example are Images. They can be resized but they still take up the entire width like blocks by default.\n"
          },

          {
            "header": "None Display",
            "content": "This type removes the element from the visible display of the screen.\n It can be used to hide elements temporarily\n"
          }
        ],
        "moreData": null,
        "miniCodeblock": null
      },
      {
        "position": 2,
        "type": "with image",
        "heading": "CSS Units",
        "description": null,
        "imagePath": null,
        "bulletPoints": [
          {
            "header": "",
            "content": ""
          }
        ],
        "subHeading": [
          {
            "header": "Percent",
            "content": "its relative of the parent element.\n"
          },
          {
            "header": "View width",
            "content": "its relative to the viewing screen\n 1vw is 1% of the entire viewable screen width\n 1vh = -----||----- \n"
          },

          {
            "header": "rem and em",
            "content": "rem=root element,\n 1rem is equal to size of the font of root element \n font-size=10px,2rem=2xthat \n rem is always same throughout the page as its based on the root \n\n 1em is equal to size of the font of the parent element \n em is based on the parent \n its useful to size elements based on the font of the text it has \n"
          }
        ],
        "moreData": null,
        "miniCodeblock": null
      }
    ]
  },

  {
    "courseId": 4,
    "courseTag": "css_in_20_minutes",
    "title": "CSS Grid Layout",
    "description": "CSS is a styling language and not a programming language. It is mainly creativity focused.",
    "requirements": "A browser like the one you are using currently to view this :) . \n A code editor , VS Code is prefered. \n Install Live server and Prettifier extensions.",
    "sectionBlocks": [
      {
        "heading": "REQUIREMENTS",
        "bulletPoints": [
          {
            "header": "",
            "content": "A browser like the one you are using currently to view this :) . \n A code editor , VS Code is prefered. \n Install Live server and Prettifier extensions."
          }
        ]
      },
      {
        "position": 1,
        "type": "normal",
        "heading": "Display props",
        "description": null,
        "imagePath": null,
        "bulletPoints": null,
        "subHeading": null,
        "moreData": null,
        "miniCodeblock": [
          {
            "header": "",
            "code": "display:grid",
            "description": "its similar to flex box \n whn used all the child elements are in a grid \n we can mention the no. of columns and the space it consumes \n"
          },

          {
            "header": "",
            "code": "display:grid \n grid-template-columns:70% 30%;\n",
            "description": "this means the first column occupied by the child elem is 70% of the parent div while the next column is of 30%. \n if there are more than 2 child elems it will folow this pattern of 2 columns for multiple rows .\n The row height will be the highest height of all the elems in that row. \n"
          },

          {
            "header": "spacing",
            "code": "grid-column-gap:1em\n grid-row-gap:1em; \n grid-gap:1em; \n",
            "description": "This adds gap of 1em between each column or row as mentioned in first 2 lines.\n \n If the same space is needed for both row and column then the third option can be used , when its used the first 2 need not be used.\n"
          },

          {
            "header": "fractions",
            "code": "grid-template-columns:1fr 1fr 2fr;\n",
            "description": "3 columns\n divides into 4 fractions \n first 2 column elems occupies 1 fraction each and 3rd col elements occupy 2 fractions of space \n these are preferred over percentage. \n"
          },

          {
            "header": "",
            "code": "grid-template-columns:repeat(4,1fr);\n",
            "description": "4 cols \n a pattern of 1fr and 2fr till the end of cols \n"
          },

          {
            "header": "row spacing",
            "code": "grid-auto-rows:300px;\n",
            "description": "each row will be of 300px height \n if the content of a elem exceed the 300px height limit it goes beyond the grid. \n"
          },

          {
            "header": "",
            "code": "grid-auto-rows:minmax(100px,auto);\n",
            "description": "here the minimum height of the row will be 100px \n maximum height will be of the elem with the highest content. \n"
          },

          {
            "header": "Aligning",
            "code": "justify-items: start/center/end/stretch;\n align-items:start/center/end/stretch/self;\n",
            "description": "To align the entire grid items.\n"
          },

          {
            "header": "",
            "code": "align-self: start/end;\n justify-self:end; \n",
            "description": "You can align each individual item in the grid within its space.\n"
          },

          {
            "header": "grid-column and grid-row",
            "code": "grid:column:start/end;\n",
            "description": ""
          },

          {
            "header": "",
            "code": ".parent{\n display:grid; \n  grid-template-column:1fr 1fr 1fr 1fr; \n grid-auto-rows:200px; \n } \n .child1{ \n grid-column:1/3; \n grid-row:1/3; \n } \n ",
            "description": "Theres a grid of 4 cols each row \n the first child with classname child1 will occupy from col 1 to col3 of in its row , and from row 1 to row2 \n "
          }
        ]
      }
    ]
  }
]
